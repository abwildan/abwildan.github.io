[{"content":"Keberadaan buku digital / buku elektronik (e-book) saat ini sudah menjadi keniscayaan di era yang juga sudah digital. Kelebihan buku elektronik dibanding buku fisik selain murah dan mudah (atau gak mudah ya? hehe) diperoleh adalah juga tidak banyak memakan tempat (rak buku, dsb). Oleh karena itu, kita (apalagi akademisi, baik di sekolah ataupun perguruan tinggi) sangat memerlukan buku sebagai referensi dalam kegiatan belajar-mengajar.\nNah, kali ini saya akan memberikan tutorial mendapatkan buku digital dengan mudah karena hanya membutuhkan telegram sebagai modal utamanya. Secara singkat, berikut adalah langkah-langkah yang perlu diikuti:\nMenginstal Tor Browser Mengakses alamat url z-library via Tor Browser Membuat akun di z-library Menghubungkan z-library ke telegram (dan membuat bot telegram) Mengunduh e-book via bot telegram z-library DISCLAIMER! Buku yang ada di Z-Library sebetulnya adalah buku \u0026ldquo;illegal\u0026rdquo; karena bukan disebarkan atau di-share langsung oleh author-nya. Itulah mengapa Z-lib di-banned FBI (wkwk, ini serius) dan harus pakai Tor Browser untuk mengaksesnya sekarang. Jadi, ini rahasia kita aja ya, wkwk\nDetail penjelasannya adalah sebagai berikut:\n1. Meginstall Tor Browser TOR Browser perlu diinstal karena kita akan mengakses alamat tor z-library (berakhiran .union). Untuk menginstall Tor Browser, kita bisa mengunjungi website-nya di sini. Silakan download binary installer TOR Browser sesuai sistem operasi dari laptop/komputer kalian. Kebetulan saya install Tor Browser di Linux dengan versi 12.5.6 yang 64 bit. 2. Mengakses alamat url z-library via Tor Browser Buka Tor Browser, kemudian koneksikan dengan jaringan Tor dengan klik tombol connect. Tunggu beberapa saat sampai proses koneksi selesai. Jika sudah terkoneksi, jangan lupa untuk meng-aktifkan bridges di Setting -\u0026gt; Connection -\u0026gt; Use current bridges Jika sudah aman semua, tinggal copy-paste url tor z-library berikut di kolom pencarian.\nopsi 1: http://zlibrary24tuxziyiyfr7zd46ytefdqbqd2axkmxm4o5374ptpc52fad.onion\nopsi 2: http://loginzlib2vrak5zzpcocc3ouizykn6k5qecgj2tzlnab5wcbqhembyd.onion\n3. Membuat akun di z-library Berikutnya, silakan buat akun z-library dengan menginputkan\nemail password, dan nickname Jika sudah, silakan login menggunakan email dan password yang sudah dibuat tadi.\n4. Menghubungkan z-library ke telegram Berikutnya, klik ikon yang ada di pojok kanan atas, lalu pilih Z-Access. Di sana, klik sub-menu Telegram Bot -\u0026gt; Open bot. Asumsinya, kalian sudah punya telegram ya. Kalau belum, silakan buat akun telegram dulu. Caranya gak susah, bisa di-google-ing.\nSelanjutnya, nanti akan ada instruksi \u0026ldquo;instalasi\u0026rdquo; bot z-ibrary di telegram, dimulai dari link yang mengarah ke bot telegram @BotFather. Silakan buka link bot tersebut di telegram web atau aplikasi telegram desktop.\nTahap selanjutnya, kita hanya perlu mengikuti instruksi yang diberikan oleh @BotFather, mulai dari memulai bot, membuat nama bot, dan terakhir, kita diminta untuk meng-copy-paste-kan pesan terakhir (yang juga berisi token untuk mengakses API z-library) dari @BotFather ke kolom yang ada di halaman z-library.\nPesan terakhir yang harus di-copy-paste seluruhnya: 5. Mengunduh e-book via bot telegram z-library Jika semua rangkaian proses tadi sudah selesai dilakukan, maka sejatinya kita sudah bisa mendapatkan e-book dari z-library dengan mudah, yaitu hanya via bot telegram \u0026ldquo;t.me/nama_bot_kalian\u0026rdquo;.\nBerikut akan saya demo-kan cara mendapatkan e-book dari z-library via bot telegram. Misalnya, saya ingin mencari buku ensiklopedia teori komunikasi, maka saya hanya perlu mengetikkan keyword berikut: encyclopedia of communication theory Oke, sekian dulu tutorial kali ini.\nSee, ya!\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/ebook-via-bot_telegram/","summary":"Keberadaan buku digital / buku elektronik (e-book) saat ini sudah menjadi keniscayaan di era yang juga sudah digital. Kelebihan buku elektronik dibanding buku fisik selain murah dan mudah (atau gak mudah ya? hehe) diperoleh adalah juga tidak banyak memakan tempat (rak buku, dsb). Oleh karena itu, kita (apalagi akademisi, baik di sekolah ataupun perguruan tinggi) sangat memerlukan buku sebagai referensi dalam kegiatan belajar-mengajar.\nNah, kali ini saya akan memberikan tutorial mendapatkan buku digital dengan mudah karena hanya membutuhkan telegram sebagai modal utamanya.","title":"Mengunduh (free) e-book via Bot Telegram"},{"content":"Terkadang, GIF punya kelebihan dibandingkan dengan file video, terutama dalam hal ukuran file. Dengan kualitas gambar yang hampir sama dengan video, file GIF bisa berukuran lebih kecil dari file video. Contohnya, saya punya sebuah file video rekaman layar 720p berdurasi 25 detik, dan satu file GIF yang merupakan hasil konversi video sebelumnya: Berikut adalah langkah-langkah membuat meng-convert video (MP4) ke GIF.\nMembuat palette Palette yang dibuat nanti akan dijadikan sebagai dasar warna dalam GIF. Oleh karena itu, kita akan buat file palette ini dalam bentuk gambar (PNG). Untuk membuat palette, berikut perintah yang perlu diketikkan:\nffmpeg -i file_video.mp4 -vf palettegen palette_output.png Membuat gif Untuk membuat GIF, kita akan tidak hanya menyertakan file video-nya saja, tapi juga file palette yang sebelumnya sudah dibuat. Berikut adalah perintah yang perlu diinputkan:\nffmpeg -i file_video.mp4 -i palette_output.png -fileter_complex \u0026#34;fps=20,scale=1080:-1[x];[x][1:v]paletteuse\u0026#34; gif_output.gif FPS dan scale-nya bisa kita sesuaikan dengan kualitas GIF yang kita inginkan. Saya set fps di 20 karena file video yang saya buat memang di 20 fps (jadi saya buat juga 20 supaya sama) dan scale-nya di 1080 untuk menjaga kualitas GIF-nya (karena memang ada tulisan kecil yang harus terbaca). Semakin bagus kualitas yang dipertahankan untuk membuat GIF, semakin lama juga proses konversi-nya, tentu, menyesuaikan dengan kualitas hardware komputer/laptop yang digunakan :)\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/ffmpeg-mp42gif/","summary":"Terkadang, GIF punya kelebihan dibandingkan dengan file video, terutama dalam hal ukuran file. Dengan kualitas gambar yang hampir sama dengan video, file GIF bisa berukuran lebih kecil dari file video. Contohnya, saya punya sebuah file video rekaman layar 720p berdurasi 25 detik, dan satu file GIF yang merupakan hasil konversi video sebelumnya: Berikut adalah langkah-langkah membuat meng-convert video (MP4) ke GIF.\nMembuat palette Palette yang dibuat nanti akan dijadikan sebagai dasar warna dalam GIF.","title":"FFmpeg - Convert MP4 to GIF"},{"content":"Kali ini, saya akan memberi tahu cara merekam layar desktop laptop atau komputer kita dengan FFmpeg. Apa itu FFmpeg? Penjelasan detail-nya tentu saja bisa didapatkan langsung dari website resminya di sini1. Tapi, sederhananya, FFmpeg adalah *utility/tool/*aplikasi/software video dan audio converter. FFmpeg juga merupakan program yang berbaris command line sebagai interface-nya. Jadi, meskipun hanya digunakan lewat CLI, tapi ffmpeg punya banyak sekali power, salah satunya adalah merekam layar desktop kita.\nMisalnya, dibandingkan beberapa aplikasi perekam layar lainnya (seperti OBS-Studio walaupun sama-sama open source), FFmpeg lebih praktis dan lebih kecil ukurannya.\nInstalasi Debian/Ubuntu-based\nsudo apt install ffmpeg Arch-based\nsudo pacman -S ffmpeg Fedora-based\nsudo dnf install ffmpeg Atau kita bisa juga mengunduh binary ffmpeg dari situs resminya2 dan menginstallnya di komputer/laptop kita.\nMe-record desktop dengan FFMPEG Untuk merekam layar desktop, kita hanya perlu mengetikkan satu baris perintah berikut:\nffmpeg -video_size 1366x768 -framerate 40 -f x11grab -i $DISPLAY -c:v libx264rgb -preset ultrafast -c:a aac output.mp4 Keterangan:\n-video_size: resolusi display yang akan direkam (1366x768 karena itulah resolusi layar saya)\n-framerate: jumlah frame per detik yang akan digunakan\n-f: mengambil I untuk video input (kebetulan saya pake X window system (X11), jadi, device input video-nya adalah x11grab)\n-i: input layar yang akan direkam (defaultnya adalah 0.0 atau via env variable=$DISPLAY yang artinya mengambil seluruh gambar layar)\n-c: codecs (encoder \u0026amp; decoder) yang disediakan oleh libavcodec library3.\n-preset: untuk menentukan kecepatan encoding terhadap rasio kompresi (semakin lambat presetnya-semakin bagus kompresinya, dan sebalinya.)4. Jika kita ingin agar rekaman layar kita hanya video saja tanpa audio, maka kita dapat menggunakan perintah berikut:\nffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 output.mp4 Lebih lanjut: baca artikel resmi FFmpeg: Capturing your Desktop / Screen Recording5\nhttps://ffmpeg.org/about.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ffmpeg.org/download.html#build-windows\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ffmpeg.org/ffmpeg-codecs.html#Description\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://trac.ffmpeg.org/wiki/Encode/H.264\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttp://trac.ffmpeg.org/wiki/Capture/Desktop\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/ffmpeg-sr/","summary":"Kali ini, saya akan memberi tahu cara merekam layar desktop laptop atau komputer kita dengan FFmpeg. Apa itu FFmpeg? Penjelasan detail-nya tentu saja bisa didapatkan langsung dari website resminya di sini1. Tapi, sederhananya, FFmpeg adalah *utility/tool/*aplikasi/software video dan audio converter. FFmpeg juga merupakan program yang berbaris command line sebagai interface-nya. Jadi, meskipun hanya digunakan lewat CLI, tapi ffmpeg punya banyak sekali power, salah satunya adalah merekam layar desktop kita.\nMisalnya, dibandingkan beberapa aplikasi perekam layar lainnya (seperti OBS-Studio walaupun sama-sama open source), FFmpeg lebih praktis dan lebih kecil ukurannya.","title":"Screen Recorder with FFmpeg"},{"content":"Mengkonfigurasi Hugo (Advanced) Setelah berhasil membuat website Hugo dan men-deploy-nya ke Github, kali ini saya akan memberi beberapa tips yang sedikit banyak dapat memberi kemudahan dan nilai estetika pada website Hugo tersebut.\nTips 1: Mengganti format file konfigurasi By default, format file konfigurasi Hugo tersimpan dalam format TOML (.toml). Tapi, Hugo sendiri menyediakan 2 opsi format lain yang dapat kita gunakan, yaitu YAML/YML (.yaml) dan JSON (.json)1.\nUntuk alasan humanisme (kemudahan dan kenyamanan dipandang dan dibaca), maka kita akan mengganti format file konfigurasi Hugo dari TOML ke YAML/YML. Alasan saya tersebut juga didukung oleh pernyataan pembuat tema Papermod di Github-nya2. Caranya, kita dapat mengunjungi website pengkonversi TOML ke YAML, misalnya saya menggunakan website \u0026ldquo;convert simple\u0026rdquo; ini. Tinggal copy-paste kode yang ada di file konfigurasi Hugo (hugo.toml) ke website tersebut. Jangan lupa ganti nama filenya juga dari hugo.toml ke hugo.yaml.\nmv hugo.toml hugo.yaml Setelah itu, kita harus memberi tahu Hugo kalau file konfigurasi kita sudah berubah formatnya dengan mengetikkan perintah berikut:\nhugo --config hugo.yaml Tips 2: Mengganti mode Home Page sesuai selera Papermod menyediakan tiga mode sebagai tampilan Home Page website Hugo kita2.\nRegular Mode (Default-mode) Home-Info Mode Untuk mengganti mode ke Home-Info Mode, kita dapat menambahkan baris kode berikut ke file konfigurasi (hugo.yaml):\nparams: homeInfoParams: Title: Hi there wave Content: Can be Info, links, about... socialIcons: # optional - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; Profile Mode Untuk mengganti mode ke Profile Mode, kita dapat menambahkan baris kode berikut ke file konfigurasi (hugo.yaml):\nparams: profileMode: enabled: true title: \u0026#34;\u0026lt;Title\u0026gt;\u0026#34; # optional default will be site title subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;image link\u0026gt;\u0026#34; # optional imageTitle: \u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34; # optional imageWidth: 120 # custom size imageHeight: 120 # custom size buttons: - name: Archive url: \u0026#34;/archive\u0026#34; - name: Github url: \u0026#34;https://github.com/\u0026#34; socialIcons: # optional - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; Tips 3: Menambahkan gambar pada postingan konten Untuk menambahkan \u0026ldquo;post cover image\u0026rdquo; seperti gambar di bawah ini: kita dapat menambahkan baris kode berikut di file konfigurasi (hugo.yaml):\ncover: image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # can also paste direct link from external site # ex. https://i.ibb.co/K0HVPBd/paper-mod-profilemode.png alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; relative: false # To use relative path for cover image, used in hugo Page-bundles Kita juga dapat menambahkan pengaturan pada gambar tersebut dalam hal responsivitas dan link-to-full-size dengan menambahkan baris kode berikut:\nparams: cover: responsiveImages: true # To reduce generation time and size of the site, you can disable this feature using linkFullImages: true # To enable hyperlinks to the full image size on post pages Tips 4: Menambahkan fitur Reading Time. Untuk menampilkan fitur reading time, tambahkan baris kode berikut:\nParams: ShowReadingTime: true # Displays Reading Time (the estimated time, in minutes, it takes to read the content.) Tips 5: Menambahkan fitur daftar isi Untuk menampilkan fitur daftar isi (Table of Content), tambahkan baris kode berikut: ShowToc: true # To show ToC add following to page-variables TocOpen: true # To keep Toc Open by default on a post add following to page-variables: Tips 6: Menambahkan fitur tombol Share Post Untuk menampilkan fitur tombol Share Post, tambahkan baris kode berikut: params: ShowShareButtons: true # Displays Share Buttons at Bottom of each post Tips 7: Menambahkan fitur Post Suggestion Untuk menampilkan fitur Post-Suggestion, tambahkan baris kode berikut: params: ShowPostNavLinks: true # Adds a Previous / Next post suggestion under a single post Tips 8: Menambahkan fitur copy button di codeblock Untuk menampilkan fitur copy di codeblock, tambahkan baris kode berikut: params: ShowCodeCopyButtons: true # Adds a copy button in code block to copy the code it contains Tips 9: Menambahkan fitur Author di postingan Untuk menampilkan fitur Author di postingan, tambahkan baris kode berikut: params: author: \u0026#34;Wildan\u0026#34; # Add author Tips 10: Menambahkan fitur menu-menu (categories, tags, archives) Untuk menampilkan fitur menu di postingan, tambahkan baris kode berikut: menu: main: - identifier: categories name: Categories url: /categories/ weight: 10 - identifier: tags name: Tags url: /tags/ weight: 20 - identifier: archives name: Archives url: /archives/ weight: 30 Kalau sudah selesai, jangan lupa commit ke repo lokal dan push ke Github:\ngit status git add . git commit -m \u0026#34;change configuration\u0026#34; git push https://gohugo.io/getting-started/configuration/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/adityatelange/hugo-PaperMod/wiki/Features#profile-mode\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/hugo-advanced/","summary":"Mengkonfigurasi Hugo (Advanced) Setelah berhasil membuat website Hugo dan men-deploy-nya ke Github, kali ini saya akan memberi beberapa tips yang sedikit banyak dapat memberi kemudahan dan nilai estetika pada website Hugo tersebut.\nTips 1: Mengganti format file konfigurasi By default, format file konfigurasi Hugo tersimpan dalam format TOML (.toml). Tapi, Hugo sendiri menyediakan 2 opsi format lain yang dapat kita gunakan, yaitu YAML/YML (.yaml) dan JSON (.json)1.\nUntuk alasan humanisme (kemudahan dan kenyamanan dipandang dan dibaca), maka kita akan mengganti format file konfigurasi Hugo dari TOML ke YAML/YML.","title":"Hugo Advanced"},{"content":"Meng-Hosting di Github Di tulisan ini, saya akan menunjukkan cara hosting static-site Hugo yang sudah dibuat sebelumnya ke Github. Jadi, sebelum lanjut membaca tutorial ini, ada 3 persyaratan yang harus sudah dipenuhi:\nPunya akun Github (kalau belum punya silakan buat dulu). Komputer/laptop-nya sudah terinstall git (kalau belum silakan install). Sudah membuat website Hugo sebelumnya (kalau belum, silakan buat dulu, tutorialnya bisa mengikuti tulisan saya sebelumnya). Saya akan menunjukkan 10 langkah dalam mem-publish atau meng-hosting static-site Hugo kita ke Github1. Berikut langkah-langkahnya:\nLangkah 1: Buat sebuah repositori baru di Github. Di Tab \u0026ldquo;Repository\u0026rdquo; -\u0026gt; Klik \u0026ldquo;New\u0026rdquo;. Misanya, saya akan namakan repositori baru saya dengan \u0026ldquo;githubwildan.github.io\u0026rdquo;. Kemudian klik \u0026ldquo;Create Repository\u0026rdquo;. Langkah 2: Push repositori lokal kita ke Github.\nJangan lupa, kalau mau konten post kita tampil, kita terlebih dahulu harus merubah value \u0026ldquo;draft\u0026rdquo; post-nya dari true ke false.\nPastikan kita di folder root direktori proyek Hugo kita. Kemudian, ketikkan perintah berikut:\ngit status git add . git commit -m \u0026#34;commit pertama ke github\u0026#34; git branch -M main git remote add origin git@github.com:abwildan/hugowildan.github.io.git git push -u origin main Langkah 3: Kita ke halaman Github repo. Kemudian dari main menu, kita klik menuju ke \u0026ldquo;Setting\u0026rdquo; -\u0026gt; \u0026ldquo;Pages\u0026rdquo;. Langkah 4: Ganti \u0026ldquo;Source\u0026rdquo; di bagian \u0026ldquo;Build and deployment\u0026rdquo; ke \u0026ldquo;Github Action\u0026rdquo;. Langkah 5: Buat file kosong baru di lokal repositori kita.\nmkdir -p .github/workflows touch .github/workflows/hugo.yaml Langkah 6: Copy-paste kode YAML berikut ke file hugo.yaml yang sudah dibuat sebelumnya. Kita dapat menyesuaikan nama branch dan versi Hugo-nya.\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.115.4 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v3 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 Langkah 7: Commit perubahan barusan ke repo lokal dan jangan lupa juga push ke Github.\ngit status git add . git commit -m \u0026#34;menambahkan file .github/workflows/hugo.yaml\u0026#34; git push Langkah 8: Di tab \u0026ldquo;Actions\u0026rdquo;, kita akan melihat seperti ini: Langkah 9: Kalau Github sudah selesai mem-build dan men-deploy website kita, warna indikator statusnya akan berubah menjadi hijau seperti ini: Langkah 10: Kita dapat melihat live website Hugo kita sudah ter-hosting di Github di link \u0026ldquo;https://hugowildan.github.io\u0026rdquo;. Artinya, siapapun sekarang bisa mengunjungi website kita! Selanjutnya, kapanpun kita mem-push perubahan dari repositori lokal, Github akan nge-rebuild website kita dan men-deploy perubahan-perubahannya.\nhttps://gohugo.io/hosting-and-deployment/hosting-on-github/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/hugo-to_github/","summary":"Meng-Hosting di Github Di tulisan ini, saya akan menunjukkan cara hosting static-site Hugo yang sudah dibuat sebelumnya ke Github. Jadi, sebelum lanjut membaca tutorial ini, ada 3 persyaratan yang harus sudah dipenuhi:\nPunya akun Github (kalau belum punya silakan buat dulu). Komputer/laptop-nya sudah terinstall git (kalau belum silakan install). Sudah membuat website Hugo sebelumnya (kalau belum, silakan buat dulu, tutorialnya bisa mengikuti tulisan saya sebelumnya). Saya akan menunjukkan 10 langkah dalam mem-publish atau meng-hosting static-site Hugo kita ke Github1.","title":"Hugo To Github"},{"content":"Membuat Website via Hugo Pengenalan singkat tentang Hugo Hugo adalah framework yang memungkinkan setiap orang untuk membuat dan mengelola website mereka.\nSecara teknis, Hugo adalah static site generator. 1\nSecara umum, website dibagi 2: dynamic \u0026amp; static site dan itu disesuaikan dengan kebutuhan atau tujuan dibuatnya website tersebut. Tapi, umumnya, static site memang banyak digunakan sebagai:\nPersonal blog posts Documentasi pages Portofolio pages, dan lain sebagainya. Instalasi Hugo Hugo dapat diinstal di sistem operasi apapun, Windows, Mac, atau Linux dapat menginstall Hugo. Tapi, kali ini, karena saya menggunakan Linux sebagai sistem operasi dasar, maka saya hanya akan membatasi instalasi Hugo di Linux saja.\nLinux Untuk instalasi Hugo di Linux, kita hanya perlu mengetikkan beberapa perintah di terminal sebagai berikut:\nDebian/Ubuntu-based\nsudo apt install hugo Fedora-based\nsudo dnf install hugo Arch-based\nsudo pacman -S install hugo Untuk distro Linux lainnya yang non-Debian/Arch/Fedora-based, tinggal menyesuaikan dengan package manager yang ada di distro tersebut. Yang jelas, yang harus dipastikan adalah bahwa program Hugo yang akan diinstal tersebut tersedia di official repository masing-masing distro.\nSetelah proses instalasi selesai, kita dapat memastikan program Hugo sudah terinstall di sistem kita dengan melihat berapa versi Hugo tersebut, melalui perintah berikut:\nhugo version Kebetulan di laptop saya, versi yang terinstall adalah Hugo v0.113.0. Bikin Hugo-site (lima menit) Tutorial ini akan terbagi menjadi 4 bagian, yaitu Membuat website,menambahkan konten, mengkonfigurasi website, mempublikasikan website2.\nSebagai prasyarat keberhasilan, versi Hugo yang terinstall harus yang extended edition, v0.112.0 atau yang terbaru.\nKita akan banyak menggunakan perintah atau command via terminal untuk mengoperasikan Hugo. Pengetahuan tentang basic git juga diperlukan.\n1. Membuat website Secara sederhana, hanya 6 perintah yang diperlukan untuk menciptakan website Hugo sebagai berikut:\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/papermod echo \u0026#34;theme = \u0026#39;papermod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml hugo server Berikut adalah penjelasan baris perbaris dari kumpulan perintah tersebut:\nhugo new site quickstart digunakan untuk membuat struktur direktori (directory structure) website kita yang tersimpan dalam folder/direktory quickstart. cd quickstart masuk ke direktori quickstart yang baru saja dibuat.\ngit init menginisialisasi direktori quickstart sebagai direktori git.\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/papermod mengkloning tema papermod ke direktori themes, dan menambahkannya sebagai git submodule di project kita.\necho \u0026#34;theme = \u0026#39;papermod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml menambahkan tema papermod di file konfigurasi website, hugo.toml.\nhugo server memulai Hugo development server. Default server-nya ada di localhost port 1313. Tekan Ctrl+c untuk menyetop development server-nya.\nTampilan website Hugo yang baru saja kita buat dengan tema papermod: 2. Menambahkan konten Untuk menambahkan page baru untuk website Hugo, kita dapat mengetikkan perintah berikut:\nhugo new post/postingan-pertama.md Hugo akan membuat file baru bernama postingan-pertama.md di direktori content/post. Buka file tersebut. Yang perlu diperhatikan adalah value dari draft adalah true. Secara default, Hugo tidak mem-publish konten yang masih berbentuk draft ketika kita mem-build website-nya nanti.Jadi, jika kita ingin konten tersebut terpublikasikan, kita hanya perlu mengganti value draft tadi ke false.\nBerikutnya, silakan tambahkan isi postingan tersebut dengan syntax markdown. Misalnya, saya akan tambahkan\n## Pengenalan Halo! Ini adalah teks **tebal**, dan ini adalah teks *miring*. Tutorial belajar Hugo bisa langsung ke website [Hugo](https://gohugo.io) ya! Simpan filenya, kemudian kita dapat memulai server development Hugo-nya dengan perintah berikut (terutama untuk menampilkan file yang masih berupa draft):\nhugo server --buildDraft hugo server -D 3. Mengkonfigurasi website Untuk mengkonfigurasi website, kita dapat membuka file konfigurasi (hugo.toml) di direktory \u0026lsquo;root\u0026rsquo; proyek Hugo kita. baseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;papermod\u0026#39; Kita dapat mengubah value baseURL ke alamat URL dimana kita akan meng-hosting website Hugo kita. Misalnya, saya akan mengganti value baseURL-nya ke \u0026lsquo;https://abwildan.github.io/' karena nanti saya akan mem-publikasikan website hugo ini di Github. Tapi, untuk sementara, karena kita belum akan mempublikasikan website kita ke manapun, jadi, kita akan meng-comment variabel baseURL ini.\nBegitu juga dengan variabel title, kita dapat mengganti value-nya dengan apapun karena itu yang akan menjadi judul website kita dan tampil di pojok kiri atas website. Misalnya, saya akan ganti judul website-nya dengan \u0026lsquo;Website Wildan\u0026rsquo;.\nUntuk melihat perubahan yang sudah dibuat, silakan di-save, dan jalankan perintah seperti sebelumnya:\nhugo server -D Maka, semua perubahan tadi akan tampak sebagai berikut:\n#baseURL = \u0026#39;https://abwildan.github.io\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;Website Wildan\u0026#39; theme = \u0026#39;papermod\u0026#39; 4. Mempublikasikan website Ketika kita memublikasikan website, Hugo akan membuat seluruh situs statis di direktori public di root proyek, termasuk file HTML, dan aset seperti gambar, berkas CSS, dan berkas JavaScript.\nKetika memublikasikan website, biasanya kita tidak ingin menyertakan konten draft. Jadi, yang akan di-publish adalah konten yang tidak berstatus draft. Perintahnya sederhana.\nhugo https://gohugo.io/about/what-is-hugo/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://gohugo.io/getting-started/quick-start/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/hugo-ing/","summary":"Membuat Website via Hugo Pengenalan singkat tentang Hugo Hugo adalah framework yang memungkinkan setiap orang untuk membuat dan mengelola website mereka.\nSecara teknis, Hugo adalah static site generator. 1\nSecara umum, website dibagi 2: dynamic \u0026amp; static site dan itu disesuaikan dengan kebutuhan atau tujuan dibuatnya website tersebut. Tapi, umumnya, static site memang banyak digunakan sebagai:\nPersonal blog posts Documentasi pages Portofolio pages, dan lain sebagainya. Instalasi Hugo Hugo dapat diinstal di sistem operasi apapun, Windows, Mac, atau Linux dapat menginstall Hugo.","title":"Hugo-ing (from Zero to Hero)"},{"content":"Hello there!\nMy name is Wildan and I am a master of communication student at Telkom University. My research interests are in human resources, health communication, and social network analysis.\nIn my free time, I usually play sports (badminton and running) and do my hobbies (journaling and linux-ing). The linux distro that I use as my daily driver is Kali Linux. This is my desktop look like:\n","permalink":"https://github.com/abwildan/abwildan.github.io/post/whoami/","summary":"Hello there!\nMy name is Wildan and I am a master of communication student at Telkom University. My research interests are in human resources, health communication, and social network analysis.\nIn my free time, I usually play sports (badminton and running) and do my hobbies (journaling and linux-ing). The linux distro that I use as my daily driver is Kali Linux. This is my desktop look like:","title":"😃 About Me"}]